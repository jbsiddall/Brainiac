{"mappings":";;AASA,QAAA,MAAM;;;;;;;;;EAGJ,CAAA;AAEF,+BAA+B,iCAAiC,CAAA;AAGhE,gCAAgC,MAAM,SAAS,uBAAuB,GAAG,uBAAuB;IAC9F,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,yBAAyB,CAAC,SAAS,qBAAqB;gBAElC,EAAE,EAAE,QAAQ,EAAU,IAAI,EAAE,MAAM,EAAU,KAAK,EAAE,CAAC;QAEpE,EAAE,EAAE,MAAM;QAIV,KAAK,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,GAAG,OAAO,CAAC,EAAE,KAAK,CAAC,uBAAuB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;CAgBpG;AAED,OAAO,MAAM,eAAgB,MAAM,SAAS,MAAM,CAAC,MAAM,EAAE,qBAAqB,CAAC,UAAU,MAAM,YAAY;IAAE,oBAAoB,EAAE,OAAO,CAAA;CAAE,cAAc;IAAE,EAAE,EAAE,QAAQ,CAAA;CAAE,KAY5J,GAAG,CAAiB,IAAZ,MAAM,MAAM,GAAG,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC,GAC5D,CAAA;AAGD,OAAO,MAAM,oBAAqB,MAAM,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,MAAM;;;;;;;;;;;;;;;;;CASvF,CAAA;AAGD,oBAAqB,CAAC,SAAS,qBAAqB,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;IAAE,EAAE,EAAE,QAAQ,CAAC;IAAC,KAAK,EAAE,CAAC,CAAC;IAAC,IAAI,EAAE,MAAM,CAAA;CAAE;;;;;;;kBAoBlH;AAED,OAAO,MAAM,MAAO,CAAC,SAAS,qBAAqB,0BAA0B;IAAE,EAAE,EAAE,QAAQ,CAAC;IAAC,IAAI,EAAE,MAAM,CAAC;IAAC,IAAI,EAAE,CAAC,CAAC;IAAC,EAAE,EAAE,MAAM,CAAA;CAAE,KAAG,SAAS,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAOjK,CAAA;AAED,OAAO,MAAM,MAAO,CAAC,SAAS,qBAAqB,6BAA6B;IAAE,EAAE,EAAE,QAAQ,CAAC;IAAC,IAAI,EAAE,MAAM,CAAC;IAAC,IAAI,EAAE,CAAC,CAAC;IAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;CAAE;;;;;;;;;;;CAUnJ,CAAA;AAQD;IACE,IAAI,EAAE,MAAM,CAAA;IACZ,qBAAqB,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;IAC9D,oBAAoB,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;IAC7D,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;QAAE,EAAE,EAAE,QAAQ,CAAA;KAAE,KAAK,IAAI,CAAA;CAC9C;AAyHD,wBAAwB,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,QAG5D","sources":["lib.ts"],"sourcesContent":["import { Database } from 'lmdb'\nimport { equals, mapObjIndexed } from 'ramda'\nimport { z, ZodType } from 'zod'\nimport { v4 as randomId } from 'uuid'\n\n\nconst RECORD_PREFIX = '$'\n\n\nconst baseModelInstanceValidator = z.object({\n  $id: z.string(),\n  $model: z.string(),\n})\n\ntype BaseModelInstanceSchema = typeof baseModelInstanceValidator\n\n\ninterface SchemaModelDefinition<Schema extends BaseModelInstanceSchema = BaseModelInstanceSchema> {\n  schema: Schema,\n}\n\nexport class ModelHelper<M extends SchemaModelDefinition> {\n\n  constructor(private db: Database, private name: string, private model: M) { }\n\n  get(id: string) {\n    return get({ db: this.db, type: this.model, id, name: this.name })\n  }\n\n  put(value: Omit<z.infer<M['schema']>, '$id' | '$model'> & Partial<z.infer<BaseModelInstanceSchema>>) {\n    return put({\n      db: this.db,\n      type: this.model,\n      name: this.name,\n      value: {\n        ...value,\n        $id: value['$id'] ?? randomId(),\n        $model: value['$model'] ?? this.name,\n      }\n    })\n  }\n\n  all() {\n    return all({ db: this.db, model: this.model, name: this.name })\n  }\n}\n\nexport const defineSchema = <Models extends Record<string, SchemaModelDefinition>>(models: Models, options?: { allowUnsafeModelName: boolean }) => ({ db }: { db: Database }) => {\n\n\n  const foo = mapObjIndexed((def, name) => {\n    if (!options?.allowUnsafeModelName && name.includes(RECORD_PREFIX)) {\n      throw new Error(`model ${name} contains illegal characters reserved for ORM '${RECORD_PREFIX}'`)\n    }\n\n    return new ModelHelper(db, name, def)\n\n  }, models)\n\n  return foo as { [K in keyof Models]: ModelHelper<Models[K]> }\n}\n\n\nexport const defineModel = <const Schema extends Record<string, ZodType>>(schema: Schema) => {\n  const unallowedProps = Object.keys(schema).filter(p => p.startsWith(RECORD_PREFIX))\n  if (unallowedProps.length > 0) {\n    throw new Error(`model can't contain any properties that are prefixed with $. found props: ${unallowedProps.join(', ')}`)\n  }\n\n  return {\n    schema: baseModelInstanceValidator.extend(schema),\n  }\n}\n\n\nexport function* all<T extends SchemaModelDefinition>({ db, model, name }: { db: Database, model: T, name: string }) {\n  for (const entry of db.getRange({ start: firstModelKey(name) })) {\n    const baseParseResult = baseModelInstanceValidator.safeParse(entry.value)\n    if (!baseParseResult.success) {\n      /* left the collection range */\n      return\n    }\n    if (baseParseResult.data.$model !== name) {\n      /* left the collection range */\n      return\n    }\n\n    const value = model.schema.parse(entry.value)\n    const key = getKey({ name, id: value.$id })\n    if (!equals(entry.key, key)) {\n      throw new Error(`internal data integrity problem. retriveved model ${name} with key ${String(entry.key)} but expected key was ${key}`)\n    }\n    yield { key, value, version: entry.version }\n  }\n  return\n}\n\nexport const get = <T extends SchemaModelDefinition>({ db, name, type, id }: { db: Database, name: string, type: T, id: string }): undefined | z.infer<T['schema']> => {\n  const key = getKey({ name, id })\n  const value = db.get(key)\n  if (value === undefined) {\n    return undefined\n  }\n  return type.schema.parse(value)\n}\n\nexport const put = <T extends SchemaModelDefinition>({ db, name, type, value }: { db: Database, name: string, type: T, value: z.infer<T['schema']> }) => {\n  const parseResults = type.schema.safeParse(value)\n  if (!parseResults.success) {\n    return { success: false as const, error: parseResults.error, value }\n  }\n\n  const key = getKey({ name, id: value.$id })\n  db.putSync(key, parseResults.data)\n\n  return { success: true as const, error: undefined, value }\n}\n\nconst getKey = ({ name, id }: { name: string, id: string }) => {\n  return [RECORD_PREFIX, name, id]\n}\nconst firstModelKey = (modelName: string) => [RECORD_PREFIX, modelName]\n\n\ninterface Migration {\n  name: string\n  modelsBeforeMigration?: Record<string, SchemaModelDefinition>,\n  modelsAfterMigration?: Record<string, SchemaModelDefinition>,\n  migration: ({ db }: { db: Database }) => void\n}\n\n\nclass MigrationRunner {\n\n  MigrationSchema = defineSchema({\n    [`${RECORD_PREFIX}migrations`]: defineModel({\n      migrationsRun: z.string().array(),\n      modelVersions: z.record(z.string()),\n    })\n  }, { allowUnsafeModelName: true })\n\n  models: ReturnType<typeof this.MigrationSchema>;\n\n  loadRunMigrations() {\n\n    const existing = this.models.$migrations.get('singleton')\n    if (!existing) {\n      const result = this.models.$migrations.put({\n        $id: 'singleton',\n        migrationsRun: [],\n        modelVersions: {}\n      })\n      if (!result.success) {\n        throw new Error('failed to save migrations record')\n      }\n      return result.value\n    }\n    return existing\n  }\n\n  updateRunMigrations(migrationName: string) {\n    const existing = this.loadRunMigrations()!\n\n    this.models.$migrations.put({\n      ...existing,\n      migrationsRun: existing.migrationsRun.concat([migrationName])\n    })\n  }\n\n  constructor(private db: Database, private migrations: Migration[]) {\n    const uniqueMigrationNames = new Set(this.migrations.map(m => m.name))\n    if (uniqueMigrationNames.size !== this.migrations.length) {\n      throw new Error('duplicate migration names')\n    }\n    this.migrations.forEach(m => {\n      if (m.name.trim().length !== m.name.length) {\n        throw new Error(`migration '${m.name}' contains whitespace in name`)\n      }\n      if (m.name.length === 0) {\n        throw new Error('migration with empty space name')\n      }\n    })\n\n    this.models = this.MigrationSchema({ db })\n  }\n\n  run() {\n    const migrationsRun = this.loadRunMigrations()\n\n    const migrationsThatNeedRunning = [] as Migration[]\n\n    for (let i = 0; i < Math.max(migrationsRun.migrationsRun.length, this.migrations.length); i++) {\n      const migrationRun = migrationsRun.migrationsRun.at(i)\n      const definedMigration = this.migrations.at(i)?.name\n\n      if (migrationRun) {\n        if (definedMigration === migrationRun) {\n          continue\n        } else {\n          throw new Error(`migrations previously run is out of order with the migrations provided in code. desprecepency is at index ${i} of hte migrations. Expected ${migrationRun}, got ${definedMigration}`)\n        }\n      } else {\n        if (!definedMigration) {\n          throw new Error('unexpected undefined migration at index ${i}')\n        }\n        migrationsThatNeedRunning.push(this.migrations[i])\n      }\n    }\n\n    for (const migration of migrationsThatNeedRunning) {\n      this.#runMigration(migration)\n    }\n  }\n\n  #runMigration(migration: Migration) {\n    this.db.transactionSync(() => {\n      const migrations = this.loadRunMigrations()\n      if (migrations.migrationsRun.includes(migration.name)) {\n        return\n      }\n\n      if (migration.modelsBeforeMigration) {\n        const models = defineSchema(migration.modelsBeforeMigration)({ db: this.db })\n        Object.keys(migration.modelsBeforeMigration ?? {}).forEach(modelName => {\n\n          for (let entry of models[modelName].all()) {\n            // implicitly validating all model records\n          }\n        })\n      }\n\n\n      migration.migration({ db: this.db })\n\n\n      if (migration.modelsAfterMigration) {\n        const models = defineSchema(migration.modelsAfterMigration)({ db: this.db })\n        Object.keys(migration.modelsAfterMigration ?? {}).forEach(modelName => {\n\n          for (let entry of models[modelName].all()) {\n            // implicitly validating all model records\n          }\n        })\n      }\n\n      this.updateRunMigrations(migration.name)\n    })\n  }\n}\n\nexport function migrate(db: Database, migrations: Migration[]) {\n  const runner = new MigrationRunner(db, migrations)\n  runner.run()\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}