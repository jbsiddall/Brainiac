{"mappings":"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","sources":["lib.ts"],"sourcesContent":["import { Database } from 'lmdb'\nimport { equals } from 'ramda'\nimport { z, ZodObject, ZodType } from 'zod'\nimport { v4 as randomId } from 'uuid'\n\n\nconst RECORD_PREFIX = '$'\n\n\nconst baseModelInstanceValidator = z.object({\n  $id: z.string(),\n  $model: z.string(),\n})\n\ntype BaseModelInstanceSchema = typeof baseModelInstanceValidator\n\ninterface Model<Name extends string = string, Schema extends BaseModelInstanceSchema = BaseModelInstanceSchema> {\n  model: Name,\n  schema: Schema,\n  helper(db: Database): ModelHelper<Model<Name, Schema>>\n}\n\nexport class ModelHelper<M extends Model> {\n\n  constructor(private db: Database, private model: M) { }\n\n  get(id: string) {\n    return get({ db: this.db, type: this.model, id })\n  }\n\n  put(value: Omit<z.infer<M['schema']>, '$id' | '$model'> & Partial<z.infer<BaseModelInstanceSchema>>) {\n    return put({\n      db: this.db,\n      type: this.model,\n      value: {\n        ...value,\n        $id: value['$id'] ?? randomId(),\n        $model: value['$model'] ?? this.model.model,\n      }\n    })\n  }\n\n  all() {\n    return all({ db: this.db, model: this.model })\n  }\n}\n\n\nexport const defineModel = <Name extends string>({ model }: { model: Name }) => <const Schema extends Record<string, ZodType>>(schema: Schema) => {\n  if (model.includes(RECORD_PREFIX)) {\n    throw new Error(`model ${model} contains illegal characters reserved for ORM '${RECORD_PREFIX}'`)\n  }\n\n  const props = Object.keys(schema)\n  if (props.includes('$id') || props.includes('$model')) {\n    throw new Error(`model ${model} can't contain any properties that are prefixed with $`)\n  }\n\n  return defineModelUnsafe({ model })(schema)\n}\n\nconst defineModelUnsafe = <Name extends string>({ model }: { model: Name }) => <const Schema extends Record<string, ZodType>>(schema: Schema) => {\n  const finalSchema = baseModelInstanceValidator.extend(schema) as any as (BaseModelInstanceSchema & ZodObject<Schema>)\n\n  const definedModel: Model<Name, BaseModelInstanceSchema & ZodObject<Schema>> = {\n    model: model,\n    schema: finalSchema,\n    helper(db) {\n      return new ModelHelper(db, definedModel)\n    }\n  }\n  return definedModel\n}\n\nexport function* all<T extends Model>({ db, model }: { db: Database, model: T }) {\n  for (const entry of db.getRange({ start: firstModelKey(model) })) {\n    const baseParseResult = baseModelInstanceValidator.safeParse(entry.value)\n    if (!baseParseResult.success) {\n      /* left the collection range */\n      return\n    }\n    if (baseParseResult.data.$model !== model.model) {\n      /* left the collection range */\n      return\n    }\n\n    const value = model.schema.parse(entry.value)\n    const key = getKey({ model, id: value.$id })\n    if (!equals(entry.key, key)) {\n      throw new Error(`internal data integrity problem. retriveved model ${model.model} with key ${String(entry.key)} but expected key was ${key}`)\n    }\n    yield { key, value, version: entry.version }\n  }\n  return\n}\n\nexport const get = <T extends Model<any, any>>({ db, type, id }: { db: Database, type: T, id: string }): undefined | z.infer<T['schema']> => {\n  const key = getKey({ model: type, id })\n  const value = db.get(key)\n  if (value === undefined) {\n    return undefined\n  }\n  return type.schema.parse(value)\n}\n\nexport const put = <T extends Model>({ db, type, value }: { db: Database, type: T, value: z.infer<T['schema']> }) => {\n  const parseResults = type.schema.safeParse(value)\n  if (!parseResults.success) {\n    return { success: false as const, error: parseResults.error, value }\n  }\n\n  const key = getKey({ model: type, id: value.$id })\n  db.putSync(key, parseResults.data)\n\n  return { success: true as const, error: undefined, value }\n}\n\nconst getKey = ({ model, id }: { model: Model, id: string }) => {\n  return [RECORD_PREFIX, model.model, id]\n}\nconst firstModelKey = (model: Model) => [RECORD_PREFIX, model.model]\n\n\ninterface Migration {\n  name: string\n  modelsBeforeMigration?: Model[]\n  modelsAfterMigration?: Model[]\n  migration: ({ db }: { db: Database }) => void\n}\n\n\nclass MigrationRunner {\n\n  MigrationModel = defineModelUnsafe({ model: '$migrations' })({\n    migrationsRun: z.string().array(),\n    modelVersions: z.record(z.string()),\n  })\n\n  loadRunMigrations() {\n    const existing = this.MigrationModel.helper(this.db).get('singleton')\n    if (!existing) {\n      const result = this.MigrationModel.helper(this.db).put({\n        $id: 'singleton',\n        migrationsRun: [],\n        modelVersions: {}\n      })\n      if (!result.success) {\n        throw new Error('failed to save migrations record')\n      }\n      return result.value\n    }\n    return existing\n  }\n\n  updateRunMigrations(migrationName: string) {\n    const existing = this.loadRunMigrations()!\n    this.MigrationModel.helper(this.db).put({\n      ...existing,\n      migrationsRun: existing.migrationsRun.concat([migrationName])\n    })\n  }\n\n  constructor(private db: Database, private migrations: Migration[]) {\n    const uniqueMigrationNames = new Set(this.migrations.map(m => m.name))\n    if (uniqueMigrationNames.size !== this.migrations.length) {\n      throw new Error('duplicate migration names')\n    }\n    this.migrations.forEach(m => {\n      if (m.name.trim().length !== m.name.length) {\n        throw new Error(`migration '${m.name}' contains whitespace in name`)\n      }\n      if (m.name.length === 0) {\n        throw new Error('migration with empty space name')\n      }\n    })\n  }\n\n  run() {\n    const migrationsRun = this.loadRunMigrations()\n\n    const migrationsThatNeedRunning = [] as Migration[]\n\n    for (let i = 0; i < Math.max(migrationsRun.migrationsRun.length, this.migrations.length); i++) {\n      const migrationRun = migrationsRun.migrationsRun.at(i)\n      const definedMigration = this.migrations.at(i)?.name\n\n      if (migrationRun) {\n        if (definedMigration === migrationRun) {\n          continue\n        } else {\n          throw new Error(`migrations previously run is out of order with the migrations provided in code. desprecepency is at index ${i} of hte migrations. Expected ${migrationRun}, got ${definedMigration}`)\n        }\n      } else {\n        if (!definedMigration) {\n          throw new Error('unexpected undefined migration at index ${i}')\n        }\n        migrationsThatNeedRunning.push(this.migrations[i])\n      }\n    }\n\n    for (const migration of migrationsThatNeedRunning) {\n      this.#runMigration(migration)\n    }\n  }\n\n  #runMigration(migration: Migration) {\n    this.db.transactionSync(() => {\n      const migrations = this.loadRunMigrations()\n      if (migrations.migrationsRun.includes(migration.name)) {\n        return\n      }\n\n      ; (migration.modelsBeforeMigration ?? []).forEach(model => {\n        const helper = new ModelHelper(this.db, model)\n        for (let entry of helper.all()) {\n          // implicitly validating all model records\n        }\n      })\n\n      migration.migration({ db: this.db })\n\n        ; (migration.modelsAfterMigration ?? []).forEach(model => {\n          const helper = new ModelHelper(this.db, model)\n          for (let entry of helper.all()) {\n            // implicitly validating all model records\n          }\n        })\n\n      this.updateRunMigrations(migration.name)\n    })\n  }\n}\n\nexport function migrate(db: Database, migrations: Migration[]) {\n  const runner = new MigrationRunner(db, migrations)\n  runner.run()\n}\n"],"names":[],"version":3,"file":"lib.js.map"}